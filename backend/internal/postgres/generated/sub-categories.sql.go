// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sub-categories.sql

package generated

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubCategory = `-- name: CreateSubCategory :one
INSERT INTO sub_categories (category_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, category_id, name, description, created_at
`

type CreateSubCategoryParams struct {
	CategoryID  int64  `json:"category_id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateSubCategory(ctx context.Context, arg CreateSubCategoryParams) (SubCategory, error) {
	row := q.db.QueryRow(ctx, createSubCategory, arg.CategoryID, arg.Name, arg.Description)
	var i SubCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubCategory = `-- name: DeleteSubCategory :exec
DELETE FROM sub_categories
WHERE id = $1
`

func (q *Queries) DeleteSubCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubCategory, id)
	return err
}

const getSubCategoryByCategoryIDAndID = `-- name: GetSubCategoryByCategoryIDAndID :one
SELECT id, category_id, name, description, created_at FROM sub_categories
WHERE category_id = $1 AND id = $2
`

type GetSubCategoryByCategoryIDAndIDParams struct {
	CategoryID int64 `json:"category_id"`
	ID         int64 `json:"id"`
}

func (q *Queries) GetSubCategoryByCategoryIDAndID(ctx context.Context, arg GetSubCategoryByCategoryIDAndIDParams) (SubCategory, error) {
	row := q.db.QueryRow(ctx, getSubCategoryByCategoryIDAndID, arg.CategoryID, arg.ID)
	var i SubCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getSubCategoryByID = `-- name: GetSubCategoryByID :one
SELECT sub_categories.id, sub_categories.category_id, sub_categories.name, sub_categories.description, sub_categories.created_at, 
       categories.name AS category_name, 
       categories.description AS category_description 
FROM sub_categories 
JOIN categories ON sub_categories.category_id = categories.id
WHERE sub_categories.id = $1
`

type GetSubCategoryByIDRow struct {
	ID                  int64     `json:"id"`
	CategoryID          int64     `json:"category_id"`
	Name                string    `json:"name"`
	Description         string    `json:"description"`
	CreatedAt           time.Time `json:"created_at"`
	CategoryName        string    `json:"category_name"`
	CategoryDescription string    `json:"category_description"`
}

func (q *Queries) GetSubCategoryByID(ctx context.Context, id int64) (GetSubCategoryByIDRow, error) {
	row := q.db.QueryRow(ctx, getSubCategoryByID, id)
	var i GetSubCategoryByIDRow
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.CategoryName,
		&i.CategoryDescription,
	)
	return i, err
}

const listSubCategories = `-- name: ListSubCategories :many
SELECT sub_categories.id, sub_categories.category_id, sub_categories.name, sub_categories.description, sub_categories.created_at, 
       categories.name AS category_name, 
       categories.description AS category_description 
FROM sub_categories
JOIN categories ON sub_categories.category_id = categories.id
ORDER BY sub_categories.name
`

type ListSubCategoriesRow struct {
	ID                  int64     `json:"id"`
	CategoryID          int64     `json:"category_id"`
	Name                string    `json:"name"`
	Description         string    `json:"description"`
	CreatedAt           time.Time `json:"created_at"`
	CategoryName        string    `json:"category_name"`
	CategoryDescription string    `json:"category_description"`
}

func (q *Queries) ListSubCategories(ctx context.Context) ([]ListSubCategoriesRow, error) {
	rows, err := q.db.Query(ctx, listSubCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSubCategoriesRow{}
	for rows.Next() {
		var i ListSubCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.CategoryName,
			&i.CategoryDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubCategoriesByCategory = `-- name: ListSubCategoriesByCategory :many
SELECT id, category_id, name, description, created_at FROM sub_categories
WHERE category_id = $1
ORDER BY name
`

func (q *Queries) ListSubCategoriesByCategory(ctx context.Context, categoryID int64) ([]SubCategory, error) {
	rows, err := q.db.Query(ctx, listSubCategoriesByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubCategory{}
	for rows.Next() {
		var i SubCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubCategory = `-- name: UpdateSubCategory :one
UPDATE sub_categories
SET name = COALESCE($1, name),
    category_id = COALESCE($2, category_id),
    description = COALESCE($3, description)
WHERE id = $4
RETURNING id, category_id, name, description, created_at
`

type UpdateSubCategoryParams struct {
	Name        pgtype.Text `json:"name"`
	CategoryID  pgtype.Int8 `json:"category_id"`
	Description pgtype.Text `json:"description"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateSubCategory(ctx context.Context, arg UpdateSubCategoryParams) (SubCategory, error) {
	row := q.db.QueryRow(ctx, updateSubCategory,
		arg.Name,
		arg.CategoryID,
		arg.Description,
		arg.ID,
	)
	var i SubCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
