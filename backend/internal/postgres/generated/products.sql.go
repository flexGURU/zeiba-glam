// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, category, image_url, size, color, stock_quantity, updated_by, sub_category)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, description, price, category, image_url, size, color, stock_quantity, deleted_at, updated_by, created_at, sub_category
`

type CreateProductParams struct {
	Name          string         `json:"name"`
	Description   string         `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	Category      string         `json:"category"`
	ImageUrl      []string       `json:"image_url"`
	Size          []string       `json:"size"`
	Color         []string       `json:"color"`
	StockQuantity int64          `json:"stock_quantity"`
	UpdatedBy     int64          `json:"updated_by"`
	SubCategory   string         `json:"sub_category"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
		arg.ImageUrl,
		arg.Size,
		arg.Color,
		arg.StockQuantity,
		arg.UpdatedBy,
		arg.SubCategory,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.ImageUrl,
		&i.Size,
		&i.Color,
		&i.StockQuantity,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.SubCategory,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, category, image_url, size, color, stock_quantity, deleted_at, updated_by, created_at, sub_category FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.ImageUrl,
		&i.Size,
		&i.Color,
		&i.StockQuantity,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.SubCategory,
	)
	return i, err
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT id, name, description, price, category, image_url, size, color, stock_quantity, deleted_at, updated_by, created_at, sub_category FROM products WHERE deleted_at IS NULL AND category = $1
`

func (q *Queries) GetProductsByCategory(ctx context.Context, category string) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.ImageUrl,
			&i.Size,
			&i.Color,
			&i.StockQuantity,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsBySubCategory = `-- name: GetProductsBySubCategory :many
SELECT id, name, description, price, category, image_url, size, color, stock_quantity, deleted_at, updated_by, created_at, sub_category FROM products WHERE deleted_at IS NULL AND sub_category = $1
`

func (q *Queries) GetProductsBySubCategory(ctx context.Context, subCategory string) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsBySubCategory, subCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.ImageUrl,
			&i.Size,
			&i.Color,
			&i.StockQuantity,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, category, image_url, size, color, stock_quantity, deleted_at, updated_by, created_at, sub_category FROM products
WHERE
    deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
    )
    AND (
        $2::float IS NULL OR price >= $2
    )
    AND (
        $3::float IS NULL OR price <= $3
    )
    AND (
        $4::text[] IS NULL OR category = ANY($4::text[])
    )
    AND (
        $5::text[] IS NULL OR sub_category = ANY($5::text[])
    )
    AND (
        $6::text[] IS NULL OR size && $6
    )
    AND (
        $7::text[] IS NULL OR color && $7
    )
ORDER BY created_at DESC
LIMIT $9 OFFSET $8
`

type ListProductsParams struct {
	Search      interface{}   `json:"search"`
	PriceFrom   pgtype.Float8 `json:"price_from"`
	PriceTo     pgtype.Float8 `json:"price_to"`
	Category    []string      `json:"category"`
	SubCategory []string      `json:"sub_category"`
	Size        []string      `json:"size"`
	Color       []string      `json:"color"`
	Offset      int32         `json:"offset"`
	Limit       int32         `json:"limit"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts,
		arg.Search,
		arg.PriceFrom,
		arg.PriceTo,
		arg.Category,
		arg.SubCategory,
		arg.Size,
		arg.Color,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Category,
			&i.ImageUrl,
			&i.Size,
			&i.Color,
			&i.StockQuantity,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsCount = `-- name: ListProductsCount :one
SELECT COUNT(*) AS total_products
FROM products
WHERE
    deleted_at IS NULL
    AND (
        COALESCE($1, '') = '' 
        OR LOWER(name) LIKE $1
    )
    AND (
        $2::float IS NULL OR price >= $2
    )
    AND (
        $3::float IS NULL OR price <= $3
    )
    AND (
        $4::text[] IS NULL OR category = ANY($4::text[])
    )
    AND (
        $5::text[] IS NULL OR sub_category = ANY($5::text[])
    )
    AND (
        $6::text[] IS NULL OR size && $6
    )
    AND (
        $7::text[] IS NULL OR color && $7
    )
`

type ListProductsCountParams struct {
	Search      interface{}   `json:"search"`
	PriceFrom   pgtype.Float8 `json:"price_from"`
	PriceTo     pgtype.Float8 `json:"price_to"`
	Category    []string      `json:"category"`
	SubCategory []string      `json:"sub_category"`
	Size        []string      `json:"size"`
	Color       []string      `json:"color"`
}

func (q *Queries) ListProductsCount(ctx context.Context, arg ListProductsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, listProductsCount,
		arg.Search,
		arg.PriceFrom,
		arg.PriceTo,
		arg.Category,
		arg.SubCategory,
		arg.Size,
		arg.Color,
	)
	var total_products int64
	err := row.Scan(&total_products)
	return total_products, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET updated_by = $1,
    name = coalesce($2, name),
    description = coalesce($3, description),
    price = coalesce($4, price),
    category = coalesce($5, category),
    sub_category = coalesce($6, sub_category),
    image_url = coalesce($7, image_url),
    size = coalesce($8, size),
    color = coalesce($9, color),
    stock_quantity = coalesce($10, stock_quantity)
WHERE id = $11
RETURNING id, name, description, price, category, image_url, size, color, stock_quantity, deleted_at, updated_by, created_at, sub_category
`

type UpdateProductParams struct {
	UpdatedBy     int64          `json:"updated_by"`
	Name          pgtype.Text    `json:"name"`
	Description   pgtype.Text    `json:"description"`
	Price         pgtype.Numeric `json:"price"`
	Category      pgtype.Text    `json:"category"`
	SubCategory   pgtype.Text    `json:"sub_category"`
	ImageUrl      []string       `json:"image_url"`
	Size          []string       `json:"size"`
	Color         []string       `json:"color"`
	StockQuantity pgtype.Int8    `json:"stock_quantity"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.UpdatedBy,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Category,
		arg.SubCategory,
		arg.ImageUrl,
		arg.Size,
		arg.Color,
		arg.StockQuantity,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Category,
		&i.ImageUrl,
		&i.Size,
		&i.Color,
		&i.StockQuantity,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.SubCategory,
	)
	return i, err
}

const updateProductCategory = `-- name: UpdateProductCategory :exec
UPDATE products
SET category = $1
WHERE category = $2
`

type UpdateProductCategoryParams struct {
	NewCategory string `json:"new_category"`
	OldCategory string `json:"old_category"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) error {
	_, err := q.db.Exec(ctx, updateProductCategory, arg.NewCategory, arg.OldCategory)
	return err
}

const updateProductSubCategory = `-- name: UpdateProductSubCategory :exec
UPDATE products
SET sub_category = $1
WHERE sub_category = $2
`

type UpdateProductSubCategoryParams struct {
	NewSubCategory string `json:"new_sub_category"`
	OldSubCategory string `json:"old_sub_category"`
}

func (q *Queries) UpdateProductSubCategory(ctx context.Context, arg UpdateProductSubCategoryParams) error {
	_, err := q.db.Exec(ctx, updateProductSubCategory, arg.NewSubCategory, arg.OldSubCategory)
	return err
}
